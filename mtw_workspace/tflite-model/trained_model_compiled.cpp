/* Generated by Edge Impulse
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/
// Generated on: 02.02.2021 02:55:08

#include <stdio.h>
#include <stdlib.h>
#include <vector>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/kernels/micro_ops.h"

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

namespace {

constexpr int kTensorArenaSize = 5424;

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_RESHAPE, OP_CONV_2D, OP_ADD, OP_MAX_POOL_2D, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[31];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[15];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,637 } };
const ALIGN(8) int32_t tensor_data1[2] = { -1, 208, };
const TfArray<1, int> tensor_dimension1 = { 1, { 2 } };
const ALIGN(8) float tensor_data2[8] = { -0.5491061806678772, -0.51368546485900879, -0.33691078424453735, -0.6036074161529541, -0.46992972493171692, -0.25508561730384827, -0.17155162990093231, -0.31371212005615234, };
const TfArray<1, int> tensor_dimension2 = { 1, { 8 } };
const ALIGN(8) float tensor_data3[16] = { -0.29673278331756592, 0.26670819520950317, -0.042781200259923935, -0.29109561443328857, -0.196759432554245, -0.15926599502563477, -0.40589535236358643, 0.23409749567508698, -0.15390554070472717, -0.27349236607551575, -0.099336259067058563, -0.30678772926330566, -0.22765496373176575, 0.32677099108695984, 0.034831833094358444, -0.33510172367095947, };
const TfArray<1, int> tensor_dimension3 = { 1, { 16 } };
const ALIGN(8) float tensor_data4[6] = { 0.084204018115997314, -0.054715856909751892, 0.21418692171573639, -0.03637530654668808, 0.024987366050481796, -0.16031032800674438, };
const TfArray<1, int> tensor_dimension4 = { 1, { 6 } };
const ALIGN(8) float tensor_data5[6*208] = { 
  0.18544194102287292, 0.12623372673988342, 0.11546484380960464, 0.20325058698654175, 0.12843865156173706, -0.13469532132148743, 0.38134276866912842, -0.22575239837169647, -0.13701029121875763, -0.049918580800294876, -0.13635396957397461, 0.40051600337028503, -0.21959760785102844, -0.27044141292572021, 0.261659175157547, -0.1241803765296936, 0.22952938079833984, 0.33924978971481323, -0.15596215426921844, 0.045083854347467422, 0.040075555443763733, -0.35443603992462158, 0.063126809895038605, -0.13829003274440765, -0.13543251156806946, -0.103477843105793, -0.2258879542350769, 0.31749114394187927, -0.31827262043952942, -0.35279431939125061, -0.11728861182928085, -0.028362920507788658, 0.13857331871986389, 0.15747916698455811, -0.043630506843328476, 0.16308477520942688, 0.030289340764284134, -0.30822831392288208, -0.079771406948566437, -0.082560278475284576, 0.08417510986328125, -0.23389007151126862, -0.028691103681921959, 0.16454991698265076, -0.20936892926692963, -0.26044496893882751, 0.24496334791183472, -0.13556964695453644, -0.0097153410315513611, 0.23365601897239685, 0.22655646502971649, -0.22782611846923828, 0.13522152602672577, -0.37738478183746338, 0.10716678202152252, 0.046896308660507202, -0.30881845951080322, -0.28119784593582153, -0.12614136934280396, 0.20299619436264038, -0.39470392465591431, -0.40698513388633728, 0.059766292572021484, -0.12151269614696503, 0.044076617807149887, -0.056107625365257263, 0.27285420894622803, -0.28136461973190308, 0.078892327845096588, -0.33991271257400513, 0.12124349176883698, -0.085636727511882782, -0.26280015707015991, -0.099500276148319244, -0.25472009181976318, 0.089368246495723724, -0.063369482755661011, -0.12023630738258362, 0.056828573346138, 0.040646154433488846, -0.25116360187530518, 0.18450918793678284, -0.22313849627971649, -0.18399320542812347, 0.065950416028499603, -0.35092860460281372, 0.055452436208724976, -0.11986402422189713, -0.030800431966781616, -0.43148466944694519, -0.37291768193244934, 0.029588470235466957, -0.48069453239440918, -0.40423297882080078, 0.038692031055688858, -0.22255253791809082, 0.086485758423805237, -0.039907652884721756, -0.07497657835483551, 0.099255770444869995, 0.12575092911720276, -0.27047827839851379, -0.036286890506744385, -0.15030777454376221, -0.095487870275974274, -0.26503843069076538, -0.19742195308208466, 0.096002139151096344, -0.28854048252105713, -0.35308510065078735, 0.1789802610874176, 0.12925058603286743, 0.19382883608341217, -0.043548982590436935, 0.26098635792732239, -0.21755565702915192, 0.024178680032491684, -0.49212849140167236, 0.064781874418258667, -0.096877157688140869, -0.0071526127867400646, -0.2241981029510498, -0.10020115226507187, 0.026776546612381935, -0.43842637538909912, -0.40471947193145752, 0.083523347973823547, -0.070169821381568909, 0.20398144423961639, -0.33907324075698853, 0.18897643685340881, -0.029169805347919464, 0.2087993323802948, -0.073812834918498993, 0.1495782881975174, 0.17548531293869019, 0.11598736047744751, -0.47968959808349609, -0.22621957957744598, 0.027696225792169571, -0.37104564905166626, -0.17533929646015167, 0.023357860743999481, -0.094059295952320099, 0.14541493356227875, -0.23330588638782501, 0.040500529110431671, -0.15468892455101013, 0.043902333825826645, -0.13567563891410828, 0.32625585794448853, 0.020138824358582497, 0.16120278835296631, 0.018271928653120995, -0.38150912523269653, 0.20365385711193085, -0.24162775278091431, -0.27023032307624817, 0.13132712244987488, 0.062633804976940155, 0.18834930658340454, -0.10279000550508499, -0.022704686969518661, 0.037785395979881287, 0.11869039386510849, -0.3756544291973114, 0.3036329448223114, -0.29505449533462524, 0.057187344878911972, 0.084223479032516479, -0.20826402306556702, 0.20540839433670044, -0.29435634613037109, -0.013455774635076523, 0.2009129673242569, -0.048578165471553802, 0.2336268424987793, 0.29609307646751404, 0.049988839775323868, -0.071508489549160004, 0.11460204422473907, -0.22694000601768494, 0.16049082577228546, -0.13449583947658539, 0.16592410206794739, -0.11569490283727646, -0.12136662006378174, 0.25168052315711975, -0.39949369430541992, -0.076320119202136993, 0.12518438696861267, 0.14722663164138794, -0.01161671057343483, -0.26601493358612061, 0.12257260829210281, 0.32952675223350525, 0.32580655813217163, -0.41239461302757263, 0.25571513175964355, -0.098547473549842834, 0.19538833200931549, 0.34629166126251221, 0.067882753908634186, 0.36110994219779968, 0.05919429287314415, -0.20932976901531219, -0.061166170984506607, 0.28847613930702209, 
  0.071645632386207581, 0.19957855343818665, 0.19605305790901184, -0.068968392908573151, 0.12895050644874573, 0.081817843019962311, 0.26392632722854614, 0.057959284633398056, 0.10297402739524841, -0.10697323828935623, -0.097007133066654205, 0.31515449285507202, -0.15438635647296906, -0.11467908322811127, 0.45323142409324646, -0.19061203300952911, 0.15870760381221771, 0.26478779315948486, -0.037680972367525101, -0.17072786390781403, 0.12743560969829559, -0.25568464398384094, 0.0099505987018346786, -0.22795349359512329, 0.015738159418106079, 0.013767961412668228, -0.22197537124156952, 0.25283032655715942, -0.19371733069419861, 0.19066385924816132, 0.1364598274230957, -0.069508969783782959, 0.16980583965778351, 0.29082757234573364, -0.32915347814559937, -0.20679143071174622, 0.096186205744743347, -0.18338774144649506, 0.064438715577125549, -0.10230318456888199, 0.10644993931055069, 0.10300175845623016, -0.19584299623966217, 0.19123436510562897, -0.16656443476676941, 0.22448551654815674, 0.015517803840339184, -0.032388769090175629, -0.01035788282752037, 0.15558621287345886, -0.37774345278739929, 0.21355882287025452, 0.22731173038482666, -0.2633529007434845, 0.058048173785209656, -0.12289006263017654, 0.18869335949420929, -0.18273958563804626, -0.27388519048690796, 0.30096456408500671, -0.18007001280784607, 0.12256232649087906, 0.032358612865209579, 0.055344969034194946, 0.031532097607851028, 0.055800966918468475, 0.022857725620269775, -0.023086734116077423, 0.21838833391666412, -0.27851524949073792, -0.053892560303211212, -0.4300626814365387, 0.058811776340007782, -0.10809463262557983, -0.169099360704422, 0.12035953253507614, -0.29814648628234863, 0.048550337553024292, 0.10593769699335098, -0.26442563533782959, 0.11843225359916687, -0.085710696876049042, -0.049297530204057693, -0.090228036046028137, 0.037414811551570892, 0.089424677193164825, 0.019823741167783737, -0.036230206489562988, -0.082572482526302338, 0.012956839986145496, -0.12557637691497803, 0.17852264642715454, -0.31688991189002991, 0.44540297985076904, 0.095770619809627533, -0.080848738551139832, 0.26589936017990112, -0.14927111566066742, -0.24087882041931152, -0.38864436745643616, 0.11384032666683197, -0.023470057174563408, 0.011499351821839809, -0.25020858645439148, 0.010025746189057827, 0.0068178707733750343, -0.49929997324943542, 0.27083700895309448, -0.030280843377113342, 0.36267507076263428, -0.066091053187847137, -0.0970802903175354, 0.050533857196569443, 0.069457828998565674, -0.16421686112880707, -0.14417435228824615, -0.12423759698867798, -0.016972513869404793, -0.10713804513216019, -0.10698790848255157, -0.015035763382911682, -0.21530784666538239, 0.11904952675104141, 0.049054320901632309, 0.067367725074291229, 0.35164210200309753, 0.087604723870754242, -0.28713336586952209, 0.19352714717388153, -0.10781752318143845, -0.17418591678142548, -0.096120350062847137, 0.07854054868221283, 0.28006637096405029, -0.053993150591850281, -0.088441044092178345, 0.018076954409480095, 0.027766255661845207, -0.13945037126541138, 0.06213710829615593, -0.038772623986005783, 0.28818833827972412, 0.10998457670211792, -0.16062301397323608, 0.1884220689535141, -0.015859520062804222, 0.022281285375356674, 0.074773110449314117, -0.088004015386104584, 0.15886472165584564, -0.28036224842071533, 0.12380776554346085, -0.047134105116128922, -0.2847655713558197, 0.18023854494094849, -0.033302411437034607, 0.14046229422092438, 0.25749212503433228, -0.011459397152066231, -0.17145612835884094, 0.043190561234951019, -0.33175686001777649, -0.23185442388057709, -0.12827958166599274, 0.0089094629511237144, 0.099612332880496979, -0.11734971404075623, -0.011462613008916378, -0.056581255048513412, -0.27135306596755981, -0.02860109880566597, 0.053409416228532791, -0.12486143410205841, 0.28703904151916504, 0.11843165755271912, -0.07615729421377182, 0.085921958088874817, -0.18603084981441498, 0.043349307030439377, 0.07066480815410614, 0.0064822607673704624, 0.20916423201560974, -0.27657616138458252, -0.059359315782785416, 0.12520910799503326, -0.24170142412185669, -0.079232409596443176, -0.024848455563187599, -0.23128759860992432, 0.36827197670936584, 0.33035331964492798, -0.038088414818048477, -0.023735392838716507, 0.15124525129795074, -0.34312215447425842, -0.06346546858549118, 0.093634866178035736, 0.31267139315605164, -0.38495063781738281, -0.075037114322185516, 0.11568264663219452, -0.57937449216842651, -0.013051732443273067, 0.23465201258659363, -0.37918049097061157, 0.19639210402965546, 0.28176477551460266, -0.2024310827255249, 
  -0.020906398072838783, -0.0023596910759806633, 0.17598530650138855, -0.31218108534812927, -0.13438701629638672, -0.024730259552598, -0.39669832587242126, 0.052756696939468384, -0.20634837448596954, 0.066089741885662079, 0.017033141106367111, -0.24918609857559204, 0.052786123007535934, 0.072374135255813599, -0.29572588205337524, 0.11380961537361145, 0.075870990753173828, 0.077912807464599609, -0.24234104156494141, -0.10061667114496231, -0.17855498194694519, 0.27163270115852356, 0.0091386213898658752, 0.11695954948663712, -0.18518336117267609, 0.035619150847196579, 0.085616707801818848, 0.015674423426389694, 0.019984440878033638, 0.44430321455001831, 0.028497572988271713, -0.013727460987865925, -0.011475912295281887, -0.0017828074051067233, 0.037496238946914673, -0.057388231158256531, -0.41326904296875, 0.11412350088357925, -0.12759453058242798, -0.10007531940937042, -0.20157134532928467, 0.11936391144990921, 0.12955188751220703, 0.082598268985748291, 0.11046011745929718, 0.47838631272315979, -0.044000878930091858, -0.011056821793317795, 0.018418751657009125, 0.095728322863578796, 0.24072849750518799, -0.11942043900489807, -0.39668932557106018, 0.16315120458602905, 0.07590523362159729, -0.089850954711437225, -0.056961063295602798, -0.13555368781089783, 0.19110515713691711, -0.096786990761756897, -0.063408471643924713, 0.2713814377784729, 0.01307792030274868, -0.10168880969285965, -0.34696194529533386, 0.23802909255027771, -0.03113851323723793, 0.036101672798395157, -0.44814544916152954, 0.17085044085979462, 0.05227387323975563, 0.22968587279319763, -0.20871682465076447, -0.072907112538814545, 0.15301795303821564, -0.082192972302436829, 0.25472089648246765, 0.19221942126750946, -0.22826452553272247, 0.24084985256195068, -0.10374724864959717, -0.20985737442970276, -0.084598973393440247, 0.19228345155715942, 0.033129744231700897, 0.11687932908535004, -0.41197487711906433, 0.29900467395782471, -0.30952182412147522, -0.083497747778892517, 0.084207169711589813, -0.25777360796928406, 0.20154993236064911, -0.33301460742950439, -0.31461581587791443, -0.13269677758216858, 0.24607349932193756, 0.03265458345413208, -0.16554917395114899, 0.42032065987586975, 0.081573791801929474, 0.087084457278251648, -0.34171774983406067, 0.27066856622695923, -0.15371064841747284, 0.0090691708028316498, 0.153594970703125, 0.17100131511688232, 0.023803053423762321, 0.041984036564826965, -0.15835006535053253, -0.26456975936889648, -0.031638834625482559, 0.063650503754615784, -0.20563533902168274, 0.28536882996559143, -0.19980902969837189, 0.13852515816688538, -0.2581087052822113, 0.14729468524456024, -0.21474303305149078, -0.081148631870746613, 0.18692325055599213, 0.057059153914451599, -0.0073453625664114952, 0.071324080228805542, -0.18735617399215698, -0.090562969446182251, 0.057214159518480301, 0.23475398123264313, -0.053224131464958191, 0.022065509110689163, -0.067274168133735657, 0.12349545955657959, -0.048443909734487534, 0.12723624706268311, -0.46795010566711426, 0.044844899326562881, 0.29846280813217163, -0.058571904897689819, -0.061965227127075195, -0.017912736162543297, -0.023935530334711075, -0.19156007468700409, 0.058035373687744141, 0.0086867418140172958, 0.048643182963132858, -0.14062751829624176, -0.098664641380310059, 0.11363182216882706, -0.15997126698493958, -0.30310356616973877, -0.48310732841491699, -0.13569359481334686, 0.040942776948213577, 0.14474080502986908, -0.084274716675281525, 0.1529817134141922, -0.29930925369262695, -0.088887408375740051, 0.01905263215303421, 0.024808665737509727, 0.18145793676376343, -0.12640571594238281, 0.03804696723818779, 0.092524915933609009, -0.074901141226291656, -0.10299470275640488, -0.17700968682765961, -0.12485311180353165, 0.044022299349308014, 0.15185599029064178, -0.0071778274141252041, 0.20755769312381744, -0.18881136178970337, 0.19127105176448822, 0.099025830626487732, -0.12277354300022125, 0.026381120085716248, -0.32716986536979675, -0.05420699343085289, 0.064961917698383331, 0.0050146980211138725, -0.27526843547821045, -0.097448162734508514, -0.17714175581932068, 0.27146950364112854, 0.085448481142520905, 0.02453249879181385, 0.33235540986061096, 0.10181235522031784, 0.18586565554141998, 0.41749754548072815, -0.042306326329708099, 0.31566682457923889, -0.28630748391151428, -0.33871182799339294, 0.064174056053161621, 0.020156186074018478, -0.12154556065797806, -0.065041430294513702, -0.087775878608226776, 0.10392311960458755, 0.15285336971282959, -0.061746101826429367, 0.15713927149772644, 0.31847798824310303, 0.15999740362167358, 
  -0.22295548021793365, 0.3743741512298584, -0.11391915380954742, 0.030144108459353447, -0.1772882491350174, 0.17504523694515228, 0.23000423610210419, 0.38292530179023743, -0.066700100898742676, -0.15775083005428314, 0.36016175150871277, -0.11686596274375916, 0.091539517045021057, -0.0046676425263285637, 0.022906182333827019, 0.24296557903289795, -0.41764020919799805, 0.12308011204004288, 0.33145660161972046, 0.11588128656148911, -0.20807887613773346, 0.23564125597476959, 0.0045588184148073196, 0.48598060011863708, -0.2009519636631012, -0.080016776919364929, 0.014073733240365982, -0.20985950529575348, 0.18099620938301086, -0.17976349592208862, 0.036431532353162766, -0.071052402257919312, -0.30147466063499451, 0.10007236152887344, 0.197262242436409, 0.044076684862375259, -0.3669770359992981, 0.24656078219413757, 0.159276083111763, 0.36837905645370483, -0.24174273014068604, -0.25756746530532837, 0.096028223633766174, -0.005446835421025753, 0.012545966543257236, 0.29679742455482483, 0.18222460150718689, -0.23280014097690582, -0.45568931102752686, 0.20873014628887177, -0.06321270763874054, 0.15745256841182709, -0.52612531185150146, 0.15103828907012939, -0.066928565502166748, 0.29440063238143921, -0.69849604368209839, -0.10289102792739868, 0.067126020789146423, 0.066399343311786652, 0.14652808010578156, -0.017824448645114899, 0.086423330008983612, -0.12301067262887955, -0.16202364861965179, -0.21335656940937042, 0.11583598703145981, 0.13168445229530334, -0.32414448261260986, 0.21731932461261749, 0.019242875277996063, 0.36110568046569824, -0.30110397934913635, -0.05852774903178215, 0.14763759076595306, -0.13770359754562378, 0.27747422456741333, 0.017433814704418182, 6.5131229348480701e-05, 0.11902178078889847, -0.15317431092262268, -0.043704632669687271, 0.088230334222316742, 0.381591796875, -0.44608935713768005, 0.19525629281997681, 0.14662551879882812, 0.38163518905639648, -0.11973856389522552, -0.022430602461099625, 0.22527119517326355, -0.10198831558227539, 0.16495892405509949, 0.086761303246021271, 0.061867859214544296, 0.036214660853147507, -0.47320100665092468, 0.31560260057449341, 0.19197802245616913, 0.15727177262306213, -0.61167371273040771, 0.041340086609125137, 0.043417785316705704, 0.35453805327415466, -0.074736088514328003, 0.03418290987610817, 0.10506980121135712, -0.057317372411489487, -0.033638108521699905, -0.016630614176392555, -0.099708683788776398, -0.051507525146007538, -0.4343525767326355, 0.13134351372718811, -0.053285874426364899, 0.075711406767368317, -0.20966912806034088, 0.30074045062065125, 0.04486396536231041, 0.11963210999965668, -0.27078822255134583, -0.019317962229251862, -0.34323376417160034, -0.33625185489654541, -0.12438756972551346, 0.064962014555931091, -0.076106078922748566, -0.010663668625056744, -0.35185757279396057, 0.10544410347938538, -0.074031636118888855, 0.02750399149954319, -0.049137983471155167, 0.27420890331268311, 0.18408891558647156, 0.15152415633201599, -0.17133289575576782, -0.093859575688838959, -0.24776220321655273, 0.007561864797025919, -0.032915979623794556, -0.083109505474567413, -0.14572820067405701, -0.014738334342837334, -0.3880368173122406, -0.019077932462096214, -0.088188968598842621, -0.022291369736194611, -0.039639376103878021, 0.064406849443912506, 0.16140425205230713, 0.31106841564178467, -0.024354422464966774, 0.19698230922222137, -0.20001256465911865, 0.13541869819164276, 0.17245559394359589, -0.36129051446914673, 0.018207836896181107, -0.098035179078578949, -0.11787610501050949, 0.041067305952310562, 0.15657848119735718, -0.30309903621673584, -0.0703863725066185, 0.00099658221006393433, 0.28759759664535522, -0.21877861022949219, -0.19517812132835388, 0.17557752132415771, -0.17248384654521942, -0.094432495534420013, 0.18671697378158569, -0.18972401320934296, 0.087793946266174316, 0.11197041720151901, -0.15270239114761353, -0.19909387826919556, -0.097214259207248688, -0.052839647978544235, -0.04062633216381073, 0.10564681142568588, -0.018615320324897766, -0.020822644233703613, 0.091969102621078491, 0.039241943508386612, -0.019473228603601456, -0.13807770609855652, 0.00052643462549895048, -0.56970447301864624, 0.10265180468559265, 0.17917469143867493, -0.34137865900993347, -0.34134232997894287, -0.15319542586803436, 0.030200373381376266, 0.046078778803348541, -0.22042681276798248, 0.033136811107397079, 0.26767909526824951, 0.14023302495479584, 0.14799700677394867, 0.38257750868797302, -0.24746739864349365, 0.052751671522855759, -0.66315442323684692, -0.35804703831672668, 0.15624868869781494, 
  -0.19573703408241272, -0.016969673335552216, 0.18567188084125519, 0.017735425382852554, -0.0847916379570961, 0.032167583703994751, -0.33585274219512939, -0.23178459703922272, -0.032882958650588989, 0.17237643897533417, 0.03770708292722702, -0.19025526940822601, 0.068549253046512604, 0.099477179348468781, -0.08653104305267334, 0.10127173364162445, -0.11257068812847137, -0.19958406686782837, 0.24978329241275787, 0.095853254199028015, -0.10180633515119553, 0.027718234807252884, -0.52088546752929688, 0.070700280368328094, -0.13581015169620514, 0.10471296310424805, 0.11838646233081818, -0.29217055439949036, 0.19115792214870453, -0.28549107909202576, -0.26646968722343445, 0.1897561103105545, 0.22180262207984924, -0.14287710189819336, 0.45976072549819946, 0.083343237638473511, 0.076271981000900269, -0.14252035319805145, -0.41300499439239502, -0.06733810156583786, 0.065995000302791595, 0.24127613008022308, 0.077612057328224182, -0.22669009864330292, 0.2450585663318634, -0.36898073554039001, -0.21451729536056519, 0.29614132642745972, 0.17269529402256012, -0.29329946637153625, 0.15110082924365997, 0.047855999320745468, 0.090673916041851044, -0.12650781869888306, -0.098668769001960754, -0.071736760437488556, 0.12492272257804871, 0.25275337696075439, 0.23245851695537567, -0.16598325967788696, 0.21975217759609222, 0.079179823398590088, -0.18120774626731873, 0.25726857781410217, 0.082371540367603302, -0.071205474436283112, -0.038921687752008438, 0.046078357845544815, 0.018280323594808578, 0.010380249470472336, -0.23663020133972168, -0.14769949018955231, 0.0017768634716048837, 0.10135170817375183, 0.16400191187858582, 0.038568414747714996, 0.12301811575889587, 0.0047832583077251911, -0.26017343997955322, 0.013182101771235466, 0.10743869841098785, -0.044891037046909332, -0.063844464719295502, -0.03217923641204834, 0.15622805058956146, -0.31248456239700317, -0.097261771559715271, -0.13623662292957306, 0.092424213886260986, 0.10455957800149918, 0.22322885692119598, -0.19516713917255402, 0.21609470248222351, -0.32094103097915649, -0.31802752614021301, 0.04131048172712326, -0.14043986797332764, -0.23476973176002502, 0.22063478827476501, -0.20233698189258575, 0.0035139995161443949, 0.017558775842189789, -0.057610433548688889, -0.076273649930953979, 0.097041137516498566, 0.39692845940589905, 0.082966111600399017, -0.14801490306854248, 0.18364831805229187, -0.25242391228675842, -0.22507497668266296, -0.06306929886341095, -0.08739849179983139, 0.015279650688171387, 0.035709228366613388, -0.091117262840270996, 0.075559176504611969, 0.050272729247808456, -0.31865444779396057, -0.075542785227298737, 0.20343697071075439, 0.24500784277915955, 0.34147664904594421, -0.20891094207763672, 0.35266265273094177, -0.13900132477283478, -0.17793603241443634, 0.24710889160633087, -0.043872009962797165, 0.1439996063709259, 0.24032250046730042, -0.087503932416439056, 0.016737075522542, -0.083231478929519653, -0.30919677019119263, -0.054349608719348907, 0.17144419252872467, 0.22811903059482574, 0.20890943706035614, -0.10165618360042572, 0.21210518479347229, -0.28765952587127686, -0.14547643065452576, 0.13848407566547394, 0.15944412350654602, -0.061256986111402512, 0.042575284838676453, -0.17433853447437286, -0.28142926096916199, -0.19537372887134552, -0.23219975829124451, -0.070831134915351868, 0.0823846235871315, 0.29831767082214355, 0.25160983204841614, -0.17069430649280548, 0.17176449298858643, -0.34680673480033875, -0.47072607278823853, 0.2175067812204361, 0.22151325643062592, 0.16672311723232269, 0.0090110022574663162, 0.085127204656600952, -0.04075811430811882, -0.16245844960212708, -0.47154238820075989, 0.18223930895328522, 0.038105934858322144, 0.13332292437553406, 0.32857215404510498, -0.22225846350193024, 0.22114910185337067, -0.42212501168251038, -0.62675172090530396, 0.056951291859149933, -0.23509131371974945, 0.29720321297645569, 0.088061273097991943, 0.0012767035514116287, -0.10870863497257233, -0.21829338371753693, -0.33264970779418945, 0.30546635389328003, 0.12920700013637543, 0.15424245595932007, -0.080466151237487793, -0.27198883891105652, 0.02259405329823494, -0.45095214247703552, -0.13174426555633545, 0.02477039210498333, -0.034584552049636841, 0.32283669710159302, 0.10231683403253555, 0.17017965018749237, -0.027065647765994072, 0.018131379038095474, 0.04000917449593544, 0.062595456838607788, -0.20484939217567444, 0.16814234852790833, -0.6553959846496582, 0.034013904631137848, 0.20501714944839478, -0.1614205539226532, 0.089656315743923187, -0.21068821847438812, 
  -0.1290239691734314, -0.53945726156234741, -0.29681587219238281, 0.10843991488218307, 0.0097419023513793945, -0.38983491063117981, -0.16076661646366119, -0.22162911295890808, 0.16144329309463501, 0.062506496906280518, -0.035328123718500137, -0.45338171720504761, 0.059992086142301559, 0.035443123430013657, -0.33480343222618103, -0.090522795915603638, 0.067385859787464142, -0.4057859480381012, -0.025866236537694931, -0.12132156640291214, 0.0069170081987977028, -0.13172173500061035, 0.0037281254772096872, -0.37967249751091003, 0.14681243896484375, 0.033882372081279755, -0.135053351521492, -0.20144408941268921, 0.10964595526456833, -0.74474835395812988, -0.027158180251717567, 0.035482443869113922, 0.06860785186290741, -0.27435493469238281, -0.10929233580827713, 0.061128005385398865, 0.045447032898664474, 0.0052055888809263706, 0.22650641202926636, -0.33038303256034851, 0.18797160685062408, -0.014333131723105907, -0.081511586904525757, -0.047577820718288422, 0.0075037591159343719, -0.34183833003044128, 0.069539792835712433, 0.13595189154148102, 0.10379309207201004, -0.098037898540496826, -0.072080709040164948, 0.13201496005058289, 0.15364918112754822, 0.13475282490253448, 0.25843259692192078, -0.042244289070367813, 0.10874271392822266, 0.10895540565252304, 0.070617258548736572, -0.057079367339611053, 0.012225455604493618, -0.22157968580722809, 0.10945973545312881, -0.079545110464096069, 0.026311246678233147, -0.050308458507061005, -0.090686053037643433, 0.12148098647594452, 0.2504141628742218, 0.14645709097385406, 0.15523660182952881, -0.047452650964260101, 0.18010583519935608, 0.11426858603954315, -0.061952840536832809, 0.14554266631603241, 0.24186892807483673, -0.044850990176200867, 0.1633521169424057, 0.039550513029098511, 0.14010854065418243, 0.15164357423782349, 0.085182830691337585, -0.11224953830242157, 0.076231911778450012, 0.34522578120231628, 0.28195169568061829, -0.13930392265319824, 0.044374987483024597, 0.13379102945327759, 0.11304254084825516, -0.05184539407491684, -0.11118257790803909, -0.09323863685131073, 0.177467942237854, 0.11905057728290558, -0.046153843402862549, -0.1488756537437439, -0.23158365488052368, 0.29873055219650269, -0.042911559343338013, 0.1445154994726181, 0.015426619909703732, -0.16608163714408875, 0.13326042890548706, -0.028115741908550262, -0.095098264515399933, -0.16801178455352783, 0.051493678241968155, -0.07146047055721283, 0.09631665050983429, 0.25032690167427063, -0.035744920372962952, -0.082190528512001038, 0.032498270273208618, 0.35747963190078735, 0.021079940721392632, 0.24465472996234894, 0.22233238816261292, -0.13722093403339386, 0.25182542204856873, 0.18327738344669342, 0.026156965643167496, -0.10267185419797897, -0.016353722661733627, -0.16634714603424072, 0.04322442039847374, 0.16738007962703705, -0.014002695679664612, 0.18756759166717529, 0.097456969320774078, 0.32205480337142944, 0.15696968138217926, 0.17238721251487732, 0.22501656413078308, -0.45706212520599365, 0.27079001069068909, 0.13778391480445862, -0.00446315947920084, -0.079666510224342346, 0.12023263424634933, 0.024906337261199951, 0.26325932145118713, 0.073303103446960449, -0.2878870964050293, 0.24209080636501312, 0.0052169938571751118, 0.13407276570796967, -0.099287852644920349, -0.054810471832752228, -0.10783380270004272, 0.13606405258178711, 0.083766505122184753, 0.1780860424041748, 0.11894132941961288, -0.088375963270664215, 0.1106543242931366, -0.030761856585741043, 0.16674438118934631, 0.069437518715858459, -0.17430640757083893, -0.10136833786964417, -0.44670471549034119, 0.028596539050340652, 0.043511483818292618, -0.061775870621204376, -0.13930568099021912, 0.035145528614521027, 0.030985811725258827, 0.13337458670139313, 0.072977542877197266, 0.029849613085389137, 0.081760555505752563, -0.086746938526630402, 0.028846841305494308, 0.033287409693002701, -0.14608690142631531, -0.03085620328783989, 0.10516566038131714, 0.085936211049556732, -0.027945872396230698, 0.33983665704727173, -0.43353432416915894, -0.085974268615245819, 0.15708519518375397, 0.16509184241294861, -0.1051250696182251, -0.29124915599822998, 0.20769400894641876, 0.0021250885911285877, -0.36209473013877869, -0.19959285855293274, -0.069736577570438385, 0.35844653844833374, -0.89510136842727661, -0.26312342286109924, 0.0230207908898592, 0.35757967829704285, -0.21838855743408203, 0.12001342326402664, 0.12157098948955536, 0.33315178751945496, 0.028637353330850601, -0.25675052404403687, 0.040752574801445007, -0.1740143746137619, -0.67389565706253052, -0.41098785400390625, 
};
const TfArray<2, int> tensor_dimension5 = { 2, { 6,208 } };
const ALIGN(8) float tensor_data6[8] = { 0, 0, 0, 0, 0, 0, 0, 0, };
const TfArray<1, int> tensor_dimension6 = { 1, { 8 } };
const ALIGN(8) float tensor_data7[8*1*3*13] = { 
  /* [0][0][][] */ -0.045447766780853271,0.42041236162185669,-0.26063442230224609,-0.0057886820286512375,0.30348688364028931,-0.027941165491938591,0.019558176398277283,0.428598552942276,-0.14035247266292572,0.072683326900005341,-0.093298465013504028,0.25412648916244507,-0.0027559690643101931, 0.36742573976516724,0.058413565158843994,-0.34211710095405579,-0.31969127058982849,0.2856808602809906,-0.052606027573347092,-0.28697782754898071,0.30053156614303589,-0.12340955436229706,0.19163072109222412,0.097090326249599457,0.060308389365673065,0.090692959725856781, -0.71858024597167969,0.12023886293172836,0.39214056730270386,-0.32679414749145508,0.11844354122877121,-0.0024518454447388649,-0.065453529357910156,0.11051161587238312,0.13478675484657288,0.42831063270568848,-0.13019217550754547,-0.1487906277179718,0.041900135576725006, 
  /* [1][0][][] */ 0.45140191912651062,0.35007613897323608,0.040585935115814209,-0.17261438071727753,-0.16157791018486023,0.11311738938093185,-0.091993875801563263,0.029097635298967361,-0.1095460057258606,0.041066348552703857,0.44045776128768921,-0.016392672434449196,0.081417188048362732, 0.53004735708236694,0.1058674156665802,0.14499783515930176,-0.2006383091211319,-0.19916103780269623,0.22687715291976929,-0.2644953727722168,0.024572446942329407,0.048310313373804092,-0.20399048924446106,0.1775016188621521,0.40319758653640747,-0.05181783065199852, 0.26451331377029419,0.26091101765632629,-0.19131177663803101,0.10976281762123108,-0.17914751172065735,0.029371386393904686,-0.096251010894775391,0.065523475408554077,-0.076401397585868835,-0.24367880821228027,0.12173561006784439,0.28979167342185974,0.25418215990066528, 
  /* [2][0][][] */ -0.28508469462394714,-0.46672186255455017,-0.44287067651748657,0.13255158066749573,-0.081076875329017639,-0.22909663617610931,-0.24002538621425629,0.16437062621116638,-0.049565542489290237,-0.31622645258903503,0.020246254280209541,0.42327621579170227,-0.064913146197795868, -0.26446995139122009,-0.53201138973236084,-0.61602628231048584,0.15444231033325195,-0.51005738973617554,-0.086058840155601501,-0.11466384679079056,0.044238630682229996,0.22931316494941711,-0.12862624228000641,0.093340232968330383,-0.030138459056615829,0.04691372811794281, -0.51743698120117188,-0.28481724858283997,-0.036087695509195328,-0.2756325900554657,-0.33365246653556824,0.33057180047035217,-0.047140069305896759,-0.0027884987648576498,-0.23506397008895874,-0.13751646876335144,0.022963039577007294,0.20124740898609161,-0.062631875276565552, 
  /* [3][0][][] */ 0.035440433770418167,-0.077496305108070374,-0.41994574666023254,-0.077082566916942596,0.25869464874267578,-0.27394211292266846,0.27951836585998535,-0.14546303451061249,0.04606940969824791,0.3246714174747467,-0.15031242370605469,0.090621307492256165,0.12609903514385223, -0.080429159104824066,-0.034613862633705139,-0.37717410922050476,-0.054995875805616379,0.25937047600746155,-0.47490277886390686,0.28618282079696655,-0.32277831435203552,0.1840585470199585,0.24795298278331757,-0.21246442198753357,0.22772671282291412,-0.066027969121932983, -0.13285653293132782,-0.16379642486572266,-0.23258614540100098,-0.065190985798835754,0.22089901566505432,-0.33138704299926758,0.40776216983795166,-0.30893385410308838,0.20572657883167267,0.34321817755699158,0.0041477540507912636,0.18152596056461334,-0.070812217891216278, 
  /* [4][0][][] */ 0.095450334250926971,0.22149956226348877,-0.45744681358337402,0.3520570695400238,-0.039038021117448807,-0.15418598055839539,0.0058254720643162727,0.19892457127571106,-0.15193086862564087,0.065969116985797882,-0.092078432440757751,-0.014633306302130222,-0.23978942632675171, 0.066194295883178711,0.34596827626228333,-0.5433800220489502,0.46922004222869873,-0.64672690629959106,0.015493743121623993,0.082535549998283386,0.042955629527568817,0.027231097221374512,0.071344330906867981,-0.17656101286411285,0.023342931643128395,0.072731189429759979, -0.19141411781311035,0.12823411822319031,0.15652814507484436,-0.067759394645690918,-0.32181009650230408,-0.049180388450622559,0.40161728858947754,-0.085089199244976044,-0.17536967992782593,-0.037481609731912613,0.091438926756381989,-0.031227763742208481,0.036249019205570221, 
  /* [5][0][][] */ -0.25562754273414612,0.16914057731628418,0.21147468686103821,0.069314293563365936,0.022192448377609253,0.26986250281333923,-0.070255368947982788,-0.032577034085988998,0.43733260035514832,-0.16473343968391418,0.1441139429807663,-0.28438380360603333,0.10508527606725693, -0.23635537922382355,-0.081209957599639893,0.42567908763885498,-0.043947342783212662,0.27699336409568787,0.088863752782344818,0.23169848322868347,-0.17802862823009491,0.26480820775032043,0.075240276753902435,-0.39857298135757446,0.012402278371155262,0.10064546018838882, 0.75878828763961792,-0.060339786112308502,0.0054525607265532017,-0.24868336319923401,0.36363694071769714,-0.05489194393157959,-0.37714412808418274,-0.014180384576320648,-0.13253125548362732,0.31264457106590271,-0.14551953971385956,0.15874244272708893,-0.003501783823594451, 
  /* [6][0][][] */ -0.28117188811302185,-0.11663137376308441,-0.31649491190910339,-0.42041212320327759,-0.29275929927825928,-0.13428188860416412,0.14731673896312714,0.014580164104700089,-0.11676857620477676,-0.037799138575792313,-0.14592252671718597,0.23178255558013916,0.037484079599380493, -0.13406148552894592,-0.16951501369476318,0.21688200533390045,0.22304496169090271,0.39414697885513306,0.1521829217672348,-0.21831928193569183,-0.10779769718647003,0.20203439891338348,-0.12278638780117035,0.19975779950618744,0.24206189811229706,0.20448057353496552, -0.61834430694580078,0.09207422286272049,0.1609359085559845,-0.28068208694458008,-0.56912529468536377,-0.27562981843948364,0.067739173769950867,-0.0033133369870483875,0.12630832195281982,0.37065094709396362,-0.041350770741701126,-0.10670790821313858,-0.27532678842544556, 
  /* [7][0][][] */ -0.3401390016078949,-0.25476652383804321,-0.22438859939575195,0.29263478517532349,0.42702838778495789,-0.29192081093788147,0.22843341529369354,0.054638698697090149,0.048531830310821533,0.23800498247146606,0.091843970119953156,-0.35092926025390625,0.088718906044960022, -0.043912060558795929,-0.21781952679157257,-0.1077728271484375,0.27432125806808472,0.22435778379440308,0.18820653855800629,0.025669394060969353,0.15175037086009979,0.0038162840064615011,0.26623380184173584,0.15904228389263153,-0.11204902082681656,-0.082898236811161041, -0.38487434387207031,-0.64031285047531128,0.21038156747817993,0.17562749981880188,-0.18354485929012299,-0.18085998296737671,0.23513486981391907,-0.23624897003173828,0.065925315022468567,-0.092651441693305969,0.36388698220252991,-0.063707105815410614,0.06740202009677887, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 8,1,3,13 } };
const ALIGN(8) float tensor_data8[16] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, };
const TfArray<1, int> tensor_dimension8 = { 1, { 16 } };
const ALIGN(8) float tensor_data9[16*1*3*8] = { 
  /* [0][0][][] */ 0.091268524527549744,-0.14698663353919983,-0.14795397222042084,0.41096055507659912,-0.014633122831583023,-0.46901366114616394,0.076568566262722015,-0.14616940915584564, 0.4041803777217865,-0.1333594024181366,-0.11301026493310928,0.0087466556578874588,-0.12475629150867462,-0.28130078315734863,-0.006166157778352499,-0.061332233250141144, 0.074920065701007843,-0.30746066570281982,-0.080853022634983063,0.34464597702026367,-0.1034085601568222,2.2729058400727808e-05,0.32716727256774902,0.015495600178837776, 
  /* [1][0][][] */ -0.18932855129241943,0.35613474249839783,-0.25176706910133362,0.002327050780877471,0.19630669057369232,-0.38031944632530212,0.27659493684768677,0.021100176498293877, -0.60242092609405518,-0.12007518112659454,-0.40761029720306396,-0.13792285323143005,-0.18434473872184753,0.17881591618061066,-0.037375565618276596,-0.31606903672218323, -0.30662804841995239,0.13261015713214874,0.0159566979855299,0.046764954924583435,0.10067028552293777,-0.15969586372375488,-0.15767866373062134,-0.21327587962150574, 
  /* [2][0][][] */ -0.17529408633708954,-0.14451296627521515,-0.20602291822433472,-0.025605825707316399,-0.086378984153270721,0.38442471623420715,-0.030059732496738434,-0.20380890369415283, 0.65354478359222412,0.0020901800598949194,-0.10633736103773117,-0.10298870503902435,0.13431963324546814,-0.33361867070198059,-0.092585168778896332,-0.022992309182882309, -0.27388325333595276,-0.24120908975601196,-0.13833028078079224,-0.15829136967658997,-0.016208434477448463,-0.23063261806964874,0.11544793844223022,-0.024126831442117691, 
  /* [3][0][][] */ -0.47116097807884216,-0.18342298269271851,-0.27384239435195923,-0.043062321841716766,-0.096671760082244873,0.20866350829601288,-0.19908560812473297,0.35361161828041077, -0.47089272737503052,-0.40483123064041138,0.00056076969485729933,0.17302677035331726,0.37272089719772339,0.11645641922950745,0.10338044911623001,0.1141715943813324, -0.38045418262481689,-0.52307087182998657,0.0029802469071000814,-0.083316467702388763,-0.15072135627269745,0.15021058917045593,-0.03861820325255394,-0.03601451963186264, 
  /* [4][0][][] */ -0.065424680709838867,-0.09960426390171051,0.10324113816022873,0.22362025082111359,-0.056870777159929276,-0.15999290347099304,-0.040820751339197159,0.15806624293327332, -0.21471239626407623,-0.29446497559547424,0.27109888195991516,0.035088498145341873,-0.23460543155670166,-0.16708198189735413,-0.160670205950737,0.2439737468957901, 0.2516520619392395,-0.40820953249931335,0.41605886816978455,0.20564819872379303,-0.26289382576942444,-0.073230594396591187,0.059633892029523849,0.14142370223999023, 
  /* [5][0][][] */ -0.20987339317798615,-0.14889909327030182,-0.44447645545005798,0.24973124265670776,0.42350322008132935,0.033297199755907059,-0.27718842029571533,-0.059829030185937881, -0.23224620521068573,-0.28534510731697083,-0.086139097809791565,0.10661128163337708,0.23145535588264465,-0.2421950101852417,-0.24770376086235046,-0.12717507779598236, -0.22508525848388672,-0.11903800070285797,0.0033699809573590755,-0.19614298641681671,0.61772853136062622,-0.20067416131496429,-0.24832139909267426,0.0050664935261011124, 
  /* [6][0][][] */ 0.16271303594112396,0.27474707365036011,0.0018134941346943378,-0.068039692938327789,0.080932497978210449,-0.32593286037445068,-0.70683169364929199,-0.083100832998752594, 0.18821826577186584,-0.02166440524160862,-0.072650305926799774,-0.12916482985019684,0.18734042346477509,-0.33992454409599304,-0.61363178491592407,-0.54766380786895752, 0.042252682149410248,0.3470897376537323,-0.069568440318107605,-0.098326429724693298,0.32252034544944763,-0.3590719997882843,-0.55077451467514038,-0.24994821846485138, 
  /* [7][0][][] */ -0.39575499296188354,-0.42160478234291077,-0.19276699423789978,-0.23322537541389465,-0.099777735769748688,0.48668107390403748,0.12915788590908051,-0.30459326505661011, -0.20787161588668823,-0.66035920381546021,-0.44683095812797546,-0.34035259485244751,0.41402041912078857,0.15401820838451385,0.11482009291648865,-0.35115942358970642, -0.65556895732879639,-0.25758209824562073,-0.47853517532348633,-0.0026877410709857941,0.15942643582820892,0.16074107587337494,-0.028501139953732491,-0.086557492613792419, 
  /* [8][0][][] */ -0.13705199956893921,-0.26419347524642944,0.50040829181671143,0.094176866114139557,-0.22826164960861206,-0.1624550074338913,0.19261780381202698,0.019394021481275558, -0.21870535612106323,-0.31440210342407227,-0.11336042732000351,0.028505798429250717,-0.2235473245382309,-0.1885850727558136,0.21790404617786407,-0.01899350993335247, -0.27888074517250061,-0.35086998343467712,0.52939397096633911,-0.083097271621227264,-0.16559964418411255,-0.10030626505613327,0.17180202901363373,-0.090169645845890045, 
  /* [9][0][][] */ -0.062856517732143402,-0.030739573761820793,0.41096067428588867,-0.14431288838386536,0.13663455843925476,0.22448436915874481,-0.50314277410507202,-0.055130250751972198, 0.047624066472053528,0.20838497579097748,0.33453014492988586,-0.14001964032649994,0.012401903979480267,-0.17773477733135223,0.24759283661842346,-0.18039937317371368, -0.16190408170223236,-0.054976746439933777,0.23363436758518219,-0.12290246784687042,0.025972066447138786,-0.15979664027690887,0.31618756055831909,-0.33097946643829346, 
  /* [10][0][][] */ -0.060154277831315994,-0.19784095883369446,0.070040054619312286,0.052388906478881836,0.18532247841358185,-0.39300370216369629,-0.0047352318651974201,-0.035128738731145859, 0.16945137083530426,-0.17638766765594482,-0.13055598735809326,-0.12450495362281799,0.093735486268997192,0.53300291299819946,0.47796249389648438,-0.069773115217685699, -0.33945351839065552,-0.04335365816950798,-0.38465368747711182,-0.27468803524971008,-0.1441701203584671,0.1291300356388092,0.26109263300895691,-0.2211390882730484, 
  /* [11][0][][] */ 0.076489441096782684,0.088096089661121368,-0.027748998254537582,0.45583528280258179,-0.45938494801521301,-0.55669379234313965,0.00052320543909445405,0.075599342584609985, -0.035976693034172058,0.36946013569831848,-0.013022664934396744,-0.077728867530822754,-0.54234904050827026,-0.68470358848571777,-0.021001985296607018,0.27831718325614929, 0.062198616564273834,0.17586001753807068,-0.084029167890548706,0.28340592980384827,-0.32006978988647461,-0.60790693759918213,-0.056897737085819244,-0.013143963180482388, 
  /* [12][0][][] */ 0.059245266020298004,-0.234286829829216,-0.22236000001430511,-0.22237685322761536,0.093709558248519897,0.19883093237876892,0.20509892702102661,-0.14157949388027191, 0.017858183011412621,-0.19922909140586853,0.53276503086090088,-0.27171587944030762,0.33709877729415894,-0.33729344606399536,0.088322252035140991,-0.058471847325563431, -0.14170193672180176,-0.1192358136177063,-0.11312834918498993,-0.25209891796112061,-0.040861446410417557,0.34577620029449463,0.14673252403736115,-0.017817774787545204, 
  /* [13][0][][] */ -0.16137726604938507,-0.015147754922509193,-0.2269379049539566,0.68945801258087158,0.001272480352781713,-0.36603638529777527,-0.22243399918079376,-0.60936117172241211, -0.16123457252979279,-0.009184371680021286,-0.22858315706253052,-0.071025677025318146,0.18606951832771301,-0.24264520406723022,-0.058842703700065613,-0.78339451551437378, -0.10725507140159607,-0.052940845489501953,-0.442069411277771,0.39659646153450012,-0.10443010181188583,-0.16896827518939972,-0.11995957791805267,-0.61963146924972534, 
  /* [14][0][][] */ 0.06137896329164505,0.23955902457237244,-0.21383187174797058,0.070543237030506134,-0.074392147362232208,0.12314566969871521,-0.36964061856269836,-0.58792406320571899, 0.20205396413803101,0.0223127081990242,-0.68964207172393799,0.10682578384876251,0.21616615355014801,0.072243615984916687,-0.40640181303024292,-0.67872422933578491, 0.038213972002267838,0.32843601703643799,-0.27365505695343018,-0.08877214789390564,0.13811735808849335,0.029678033664822578,-0.41636869311332703,-0.49149563908576965, 
  /* [15][0][][] */ 0.32774755358695984,0.14699853956699371,0.090393111109733582,-0.063671745359897614,-0.057332515716552734,-0.16264247894287109,-0.13304294645786285,-0.20272186398506165, -0.051014989614486694,0.23873697221279144,-0.098060004413127899,-0.38146206736564636,0.11612057685852051,0.074687398970127106,0.34267711639404297,-0.10791674256324768, 0.07732139527797699,-0.104376420378685,0.16221660375595093,-0.33108752965927124,-0.20563837885856628,0.17400319874286652,-0.03628481924533844,0.084567099809646606, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 16,1,3,8 } };
const ALIGN(8) int32_t tensor_data10[4] = { 1, 1, 49, 13, };
const TfArray<1, int> tensor_dimension10 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data11[3] = { 1, 49, 8, };
const TfArray<1, int> tensor_dimension11 = { 1, { 3 } };
const ALIGN(8) int32_t tensor_data12[4] = { 1, 49, 1, 8, };
const TfArray<1, int> tensor_dimension12 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data13[4] = { 1, 1, 25, 8, };
const TfArray<1, int> tensor_dimension13 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data14[3] = { 1, 25, 16, };
const TfArray<1, int> tensor_dimension14 = { 1, { 3 } };
const ALIGN(8) int32_t tensor_data15[4] = { 1, 25, 1, 16, };
const TfArray<1, int> tensor_dimension15 = { 1, { 4 } };
const TfArray<4, int> tensor_dimension16 = { 4, { 1,1,49,13 } };
const TfArray<4, int> tensor_dimension17 = { 4, { 1,1,49,8 } };
const TfArray<3, int> tensor_dimension18 = { 3, { 1,49,8 } };
const TfArray<3, int> tensor_dimension19 = { 3, { 1,49,8 } };
const TfArray<4, int> tensor_dimension20 = { 4, { 1,49,1,8 } };
const TfArray<4, int> tensor_dimension21 = { 4, { 1,25,1,8 } };
const TfArray<4, int> tensor_dimension22 = { 4, { 1,1,25,8 } };
const TfArray<4, int> tensor_dimension23 = { 4, { 1,1,25,16 } };
const TfArray<3, int> tensor_dimension24 = { 3, { 1,25,16 } };
const TfArray<3, int> tensor_dimension25 = { 3, { 1,25,16 } };
const TfArray<4, int> tensor_dimension26 = { 4, { 1,25,1,16 } };
const TfArray<4, int> tensor_dimension27 = { 4, { 1,13,1,16 } };
const TfArray<2, int> tensor_dimension28 = { 2, { 1,208 } };
const TfArray<2, int> tensor_dimension29 = { 2, { 1,6 } };
const TfArray<2, int> tensor_dimension30 = { 2, { 1,6 } };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,10 } };
const TfArray<1, int> outputs0 = { 1, { 16 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 16,7,6 } };
const TfArray<1, int> outputs1 = { 1, { 17 } };
const TfLiteReshapeParams opdata2 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs2 = { 2, { 17,11 } };
const TfArray<1, int> outputs2 = { 1, { 18 } };
const TfLiteAddParams opdata3 = { kTfLiteActRelu };
const TfArray<2, int> inputs3 = { 2, { 18,2 } };
const TfArray<1, int> outputs3 = { 1, { 19 } };
const TfLiteReshapeParams opdata4 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs4 = { 2, { 19,12 } };
const TfArray<1, int> outputs4 = { 1, { 20 } };
const TfLitePoolParams opdata5 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs5 = { 1, { 20 } };
const TfArray<1, int> outputs5 = { 1, { 21 } };
const TfLiteReshapeParams opdata6 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs6 = { 2, { 21,13 } };
const TfArray<1, int> outputs6 = { 1, { 22 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 22,9,8 } };
const TfArray<1, int> outputs7 = { 1, { 23 } };
const TfLiteReshapeParams opdata8 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs8 = { 2, { 23,14 } };
const TfArray<1, int> outputs8 = { 1, { 24 } };
const TfLiteAddParams opdata9 = { kTfLiteActRelu };
const TfArray<2, int> inputs9 = { 2, { 24,3 } };
const TfArray<1, int> outputs9 = { 1, { 25 } };
const TfLiteReshapeParams opdata10 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs10 = { 2, { 25,15 } };
const TfArray<1, int> outputs10 = { 1, { 26 } };
const TfLitePoolParams opdata11 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs11 = { 1, { 26 } };
const TfArray<1, int> outputs11 = { 1, { 27 } };
const TfLiteReshapeParams opdata12 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs12 = { 2, { 27,1 } };
const TfArray<1, int> outputs12 = { 1, { 28 } };
const TfLiteFullyConnectedParams opdata13 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs13 = { 3, { 28,5,4 } };
const TfArray<1, int> outputs13 = { 1, { 29 } };
const TfLiteSoftmaxParams opdata14 = { 1 };
const TfArray<1, int> inputs14 = { 1, { 29 } };
const TfArray<1, int> outputs14 = { 1, { 30 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteFloat32, tensor_arena + 2560, (TfLiteIntArray*)&tensor_dimension0, 2548, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 8, },
  { kTfLiteMmapRo, kTfLiteFloat32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 32, },
  { kTfLiteMmapRo, kTfLiteFloat32, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 64, },
  { kTfLiteMmapRo, kTfLiteFloat32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 24, },
  { kTfLiteMmapRo, kTfLiteFloat32, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 4992, },
  { kTfLiteMmapRo, kTfLiteFloat32, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 32, },
  { kTfLiteMmapRo, kTfLiteFloat32, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 1248, },
  { kTfLiteMmapRo, kTfLiteFloat32, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 64, },
  { kTfLiteMmapRo, kTfLiteFloat32, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 1536, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 16, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 12, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data12, (TfLiteIntArray*)&tensor_dimension12, 16, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data13, (TfLiteIntArray*)&tensor_dimension13, 16, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data14, (TfLiteIntArray*)&tensor_dimension14, 12, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data15, (TfLiteIntArray*)&tensor_dimension15, 16, },
  { kTfLiteArenaRw, kTfLiteFloat32, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension16, 2548, },
  { kTfLiteArenaRw, kTfLiteFloat32, tensor_arena + 2560, (TfLiteIntArray*)&tensor_dimension17, 1568, },
  { kTfLiteArenaRw, kTfLiteFloat32, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension18, 1568, },
  { kTfLiteArenaRw, kTfLiteFloat32, tensor_arena + 1568, (TfLiteIntArray*)&tensor_dimension19, 1568, },
  { kTfLiteArenaRw, kTfLiteFloat32, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension20, 1568, },
  { kTfLiteArenaRw, kTfLiteFloat32, tensor_arena + 1568, (TfLiteIntArray*)&tensor_dimension21, 800, },
  { kTfLiteArenaRw, kTfLiteFloat32, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension22, 800, },
  { kTfLiteArenaRw, kTfLiteFloat32, tensor_arena + 1600, (TfLiteIntArray*)&tensor_dimension23, 1600, },
  { kTfLiteArenaRw, kTfLiteFloat32, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension24, 1600, },
  { kTfLiteArenaRw, kTfLiteFloat32, tensor_arena + 1600, (TfLiteIntArray*)&tensor_dimension25, 1600, },
  { kTfLiteArenaRw, kTfLiteFloat32, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension26, 1600, },
  { kTfLiteArenaRw, kTfLiteFloat32, tensor_arena + 1600, (TfLiteIntArray*)&tensor_dimension27, 832, },
  { kTfLiteArenaRw, kTfLiteFloat32, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension28, 832, },
  { kTfLiteArenaRw, kTfLiteFloat32, tensor_arena + 832, (TfLiteIntArray*)&tensor_dimension29, 24, },
  { kTfLiteArenaRw, kTfLiteFloat32, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension30, 24, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_ADD, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_ADD, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs11, (TfLiteIntArray*)&outputs11, const_cast<void*>(static_cast<const void*>(&opdata11)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs12, (TfLiteIntArray*)&outputs12, const_cast<void*>(static_cast<const void*>(&opdata12)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs13, (TfLiteIntArray*)&outputs13, const_cast<void*>(static_cast<const void*>(&opdata13)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs14, (TfLiteIntArray*)&outputs14, const_cast<void*>(static_cast<const void*>(&opdata14)), OP_SOFTMAX, },
};
static std::vector<void*> overflow_buffers;
static TfLiteStatus AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                                 size_t bytes, void** ptr) {
  if (current_location - bytes < tensor_boundary) {
    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    *ptr = malloc(bytes);
    if (*ptr == NULL) {
      printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return kTfLiteError;
    }
    overflow_buffers.push_back(*ptr);
    return kTfLiteOk;
  }

  current_location -= bytes;

  *ptr = current_location;
  return kTfLiteOk;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static std::vector<scratch_buffer_t> scratch_buffers;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  scratch_buffer_t b;
  b.bytes = bytes;

  TfLiteStatus s = AllocatePersistentBuffer(ctx, b.bytes, &b.ptr);
  if (s != kTfLiteOk) {
    return s;
  }

  scratch_buffers.push_back(b);

  *buffer_idx = scratch_buffers.size() - 1;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > static_cast<int>(scratch_buffers.size()) - 1) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}
} // namespace

  TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 31;
  for(size_t i = 0; i < 31; ++i) {
    tflTensors[i].type = tensorData[i].type;
    tflTensors[i].is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

     tflTensors[i].data.data =  start;
    }
    else{
       tflTensors[i].data.data = tensorData[i].data;
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization.type = kTfLiteNoQuantization;
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_RESHAPE] = *tflite::ops::micro::Register_RESHAPE();
  registrations[OP_CONV_2D] = *tflite::ops::micro::Register_CONV_2D();
  registrations[OP_ADD] = *tflite::ops::micro::Register_ADD();
  registrations[OP_MAX_POOL_2D] = *tflite::ops::micro::Register_MAX_POOL_2D();
  registrations[OP_FULLY_CONNECTED] = *tflite::ops::micro::Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = *tflite::ops::micro::Register_SOFTMAX();

  for(size_t i = 0; i < 15; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
    tflNodes[i].custom_initial_data = nullptr;
    tflNodes[i].custom_initial_data_size = 0;
    if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for(size_t i = 0; i < 15; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  30, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  for(size_t i = 0; i < 15; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);
    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif
  scratch_buffers.clear();
  for (size_t ix = 0; ix < overflow_buffers.size(); ix++) {
    free(overflow_buffers[ix]);
  }
  overflow_buffers.clear();
  return kTfLiteOk;
}
